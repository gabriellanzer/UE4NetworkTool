/******************************************************************************
 *	Simple per-pixel lighting shader
 *****************************************************************************/

#define SPECULAR

#ifndef TEXTURING
#define TEXTURING	1
#endif

#define PIXEL_LIGHT_DIR
#define PIXEL_HALF_VEC

// Variables passed from vertex to fragment shader
varying vec4 diffuse, ambient, specular;
varying vec3 normal;
// PIXEL_LIGHT_DIR is required for point light, but not needed for directional light
#ifndef PIXEL_LIGHT_DIR
varying vec3 lightDir;
#endif
varying vec3 position;
#ifndef PIXEL_HALF_VEC
varying vec3 halfVector;
#endif

// Parameters
#if TEXTURING
uniform sampler2D tex;
#endif

uniform bool useLighting;		// when set to "false", use vertex color only
uniform vec3 eyeLocation;


void VertexShaderMain()
{
	// vectors
	normal     = normalize(gl_NormalMatrix * gl_Normal);		// eye-space
	position   = (gl_ModelViewMatrix * gl_Vertex).xyz;			// eye-space
	// note: gl_LightSource.position is already transformed to eye-space
#ifndef PIXEL_LIGHT_DIR
	lightDir   = gl_LightSource[0].position.xyz - position;
#endif
#ifndef PIXEL_HALF_VEC
	halfVector = gl_LightSource[0].halfVector.xyz; // per-vertex ... bad
#endif
	// light parameters
	if (useLighting)
	{
		// gl_FrontMaterial.diffuse and gl_FrontMaterial.ambient are premultiplied by gl_Color (see docs/glsl.txt)
		diffuse  = /*gl_FrontMaterial.diffuse * */ gl_Color * gl_LightSource[0].diffuse;
		ambient  = /*gl_FrontMaterial.ambient * */ gl_Color * (gl_LightSource[0].ambient + gl_LightModel.ambient);
		specular = gl_FrontMaterial.specular * gl_LightSource[0].specular;
	}
	else
	{
		diffuse  = vec4(0.0);
		ambient  = gl_Color;
		specular = vec4(0.0);
	}
	gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_Position    = ftransform();
}


void PixelShaderMain()
{
#ifdef PIXEL_LIGHT_DIR
	vec3 lightDir  = gl_LightSource[0].position.xyz - position;	// do it per pixel
#endif
	vec3 nLightDir = normalize(lightDir);
	vec3 n         = normalize(normal);
	float NdotL = max(dot(n, nLightDir), 0.0);
	// ambient + diffuse
	vec4 color = ambient + diffuse * NdotL;

#if TEXTURING
	vec4 texColor = texture2D(tex, gl_TexCoord[0].st);
	color.rgb *= texColor.rgb;
	color.a   =  texColor.a;
#endif // TEXTURING

#ifdef SPECULAR
	// specular
	// per-pixel half vector: average between direction from pixel to
	// light and from pixel to viewer
	float specularScale = 0.5;
#ifdef PIXEL_HALF_VEC
	vec3 eyeDir     = normalize(eyeLocation - position);
	vec3 halfVector = nLightDir + eyeDir;
#endif
	vec3 halfV      = normalize(halfVector);
	float NdotHV    = max(dot(n, halfV), 0.0);
	color.rgb += pow(NdotHV, gl_FrontMaterial.shininess) * specular.rgb * specularScale;
#endif // SPECULAR

#ifdef NORMALMAP
	gl_FragColor = vec4(n, 1.0);	// show normalmap
#else
	gl_FragColor = color;
#endif
}

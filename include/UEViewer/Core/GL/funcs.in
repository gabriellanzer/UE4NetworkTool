//-----------------------------------------------------------------------------
//  OpenGL 1.1
//-----------------------------------------------------------------------------

//void Accum(GLenum op, GLfloat value);
void AlphaFunc(GLenum func, GLclampf ref) ARGS
//GLboolean AreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences);
//void ArrayElement(GLint i) ARGS
void Begin(GLenum mode) ARGS
void BindTexture(GLenum target, GLuint texture) ARGS
//void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void BlendFunc(GLenum sfactor, GLenum dfactor) ARGS
//void CallList(GLuint list);
//void CallLists(GLsizei n, GLenum type, const GLvoid *lists);
void Clear(GLbitfield mask);
//void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) ARGS
//void ClearDepth(GLclampd depth) ARGS
//void ClearIndex(GLfloat c);
//void ClearStencil(GLint s);
//void ClipPlane(GLenum plane, const GLdouble *equation);
//void Color3b(GLbyte red, GLbyte green, GLbyte blue);
//void Color3bv(const GLbyte *v);
//void Color3d(GLdouble red, GLdouble green, GLdouble blue);
//void Color3dv(const GLdouble *v);
void Color3f(GLfloat red, GLfloat green, GLfloat blue) ARGS
void Color3fv(const GLfloat *v);
//void Color3i(GLint red, GLint green, GLint blue);
//void Color3iv(const GLint *v);
//void Color3s(GLshort red, GLshort green, GLshort blue);
//void Color3sv(const GLshort *v);
//void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
//void Color3ubv(const GLubyte *v);
//void Color3ui(GLuint red, GLuint green, GLuint blue);
//void Color3uiv(const GLuint *v);
//void Color3us(GLushort red, GLushort green, GLushort blue);
//void Color3usv(const GLushort *v);
//void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) ARGS
//void Color4bv(const GLbyte *v);
//void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
//void Color4dv(const GLdouble *v);
void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) ARGS
void Color4fv(const GLfloat *v);
//void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
//void Color4iv(const GLint *v);
//void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
//void Color4sv(const GLshort *v);
//void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) ARGS
void Color4ubv(const GLubyte *v);
//void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
//void Color4uiv(const GLuint *v);
//void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
//void Color4usv(const GLushort *v);
//void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
//void ColorMaterial(GLenum face, GLenum mode);
void ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) ARGS
//void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
//void CopyTexImage1D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
//void CopyTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) ARGS
//void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
//void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) ARGS
void CullFace(GLenum mode) ARGS
//void DeleteLists(GLuint list, GLsizei range);
void DeleteTextures(GLsizei n, const GLuint *textures) ARGS
void DepthFunc(GLenum func) ARGS
void DepthMask(GLboolean flag) ARGS
void DepthRange(GLclampd zNear, GLclampd zFar) ARGS
void Disable(GLenum cap) ARGS
void DisableClientState(GLenum array) ARGS
//void DrawArrays(GLenum mode, GLint first, GLsizei count) ARGS
//void DrawBuffer(GLenum mode) ARGS
void DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) ARGS
//void DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
//void EdgeFlag(GLboolean flag);
//void EdgeFlagPointer(GLsizei stride, const GLvoid *pointer);
//void EdgeFlagv(const GLboolean *flag);
void Enable(GLenum cap) ARGS
void EnableClientState(GLenum array) ARGS
void End();
//void EndList();
//void EvalCoord1d(GLdouble u);
//void EvalCoord1dv(const GLdouble *u);
//void EvalCoord1f(GLfloat u);
//void EvalCoord1fv(const GLfloat *u);
//void EvalCoord2d(GLdouble u, GLdouble v);
//void EvalCoord2dv(const GLdouble *u);
//void EvalCoord2f(GLfloat u, GLfloat v);
//void EvalCoord2fv(const GLfloat *u);
//void EvalMesh1(GLenum mode, GLint i1, GLint i2);
//void EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
//void EvalPoint1(GLint i);
//void EvalPoint2(GLint i, GLint j);
//void FeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
void Finish();
//void Flush();
//void Fogf(GLenum pname, GLfloat param) ARGS
//void Fogfv(GLenum pname, const GLfloat *params) ARGS
//void Fogi(GLenum pname, GLint param);
//void Fogiv(GLenum pname, const GLint *params);
//void FrontFace(GLenum mode);
//void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) ARGS
//GLuint GenLists(GLsizei range);
void GenTextures(GLsizei n, GLuint *textures);
//void GetBooleanv(GLenum pname, GLboolean *params);
//void GetClipPlane(GLenum plane, GLdouble *equation);
//void GetDoublev(GLenum pname, GLdouble *params);
GLenum GetError() NOLOG
//void GetFloatv(GLenum pname, GLfloat *params);
void GetIntegerv(GLenum pname, GLint *params);
void GetLightfv(GLenum light, GLenum pname, GLfloat *params);
//void GetLightiv(GLenum light, GLenum pname, GLint *params);
//void GetMapdv(GLenum target, GLenum query, GLdouble *v);
//void GetMapfv(GLenum target, GLenum query, GLfloat *v);
//void GetMapiv(GLenum target, GLenum query, GLint *v);
//void GetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
//void GetMaterialiv(GLenum face, GLenum pname, GLint *params);
//void GetPixelMapfv(GLenum map, GLfloat *values);
//void GetPixelMapuiv(GLenum map, GLuint *values);
//void GetPixelMapusv(GLenum map, GLushort *values);
//void GetPointerv(GLenum pname, GLvoid **params);
//void GetPolygonStipple(GLubyte *mask);
const GLubyte * GetString(GLenum name);
//void GetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
//void GetTexEnviv(GLenum target, GLenum pname, GLint *params);
//void GetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
//void GetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
//void GetTexGeniv(GLenum coord, GLenum pname, GLint *params);
//void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
//void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
//void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
//void GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
//void GetTexParameteriv(GLenum target, GLenum pname, GLint *params);
//void Hint(GLenum target, GLenum mode) ARGS
//void IndexMask(GLuint mask);
//void IndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
//void Indexd(GLdouble c);
//void Indexdv(const GLdouble *c);
//void Indexf(GLfloat c);
//void Indexfv(const GLfloat *c);
//void Indexi(GLint c);
//void Indexiv(const GLint *c);
//void Indexs(GLshort c);
//void Indexsv(const GLshort *c);
//void Indexub(GLubyte c);
//void Indexubv(const GLubyte *c);
//void InitNames();
//void InterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
GLboolean IsEnabled(GLenum cap);
//GLboolean IsList(GLuint list);
GLboolean IsTexture(GLuint texture);
//void LightModelf(GLenum pname, GLfloat param);
//void LightModelfv(GLenum pname, const GLfloat *params);
void LightModeli(GLenum pname, GLint param);
//void LightModeliv(GLenum pname, const GLint *params);
//void Lightf(GLenum light, GLenum pname, GLfloat param);
void Lightfv(GLenum light, GLenum pname, const GLfloat *params);
//void Lighti(GLenum light, GLenum pname, GLint param);
//void Lightiv(GLenum light, GLenum pname, const GLint *params);
//void LineStipple(GLint factor, GLushort pattern);
void LineWidth(GLfloat width);
//void ListBase(GLuint base);
void LoadIdentity();
//void LoadMatrixd(const GLdouble *m);
void LoadMatrixf(const GLfloat *m);
//void LoadName(GLuint name);
//void LogicOp(GLenum opcode);
//void Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
//void Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
//void Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
//void Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
//void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
//void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
//void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
//void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void Materialf(GLenum face, GLenum pname, GLfloat param);
void Materialfv(GLenum face, GLenum pname, const GLfloat *params);
//void Materiali(GLenum face, GLenum pname, GLint param);
//void Materialiv(GLenum face, GLenum pname, const GLint *params);
void MatrixMode(GLenum mode) ARGS
//void MultMatrixd(const GLdouble *m);
//void MultMatrixf(const GLfloat *m);
//void NewList(GLuint list, GLenum mode);
//void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
//void Normal3bv(const GLbyte *v);
//void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
//void Normal3dv(const GLdouble *v);
//void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
void Normal3fv(const GLfloat *v);
//void Normal3i(GLint nx, GLint ny, GLint nz);
//void Normal3iv(const GLint *v);
//void Normal3s(GLshort nx, GLshort ny, GLshort nz);
//void Normal3sv(const GLshort *v);
void NormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) ARGS
//void PassThrough(GLfloat token);
//void PixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values);
//void PixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values);
//void PixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values);
//void PixelStoref(GLenum pname, GLfloat param);
//void PixelStorei(GLenum pname, GLint param);
//void PixelTransferf(GLenum pname, GLfloat param);
//void PixelTransferi(GLenum pname, GLint param);
//void PixelZoom(GLfloat xfactor, GLfloat yfactor);
//void PointSize(GLfloat size);
void PolygonMode(GLenum face, GLenum mode) ARGS
//void PolygonOffset(GLfloat factor, GLfloat units) ARGS
//void PolygonStipple(const GLubyte *mask);
//void PopAttrib();
//void PopClientAttrib();
void PopMatrix();
//void PopName();
//void PrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
//void PushAttrib(GLbitfield mask);
//void PushClientAttrib(GLbitfield mask);
void PushMatrix();
//void PushName(GLuint name);
//void RasterPos2d(GLdouble x, GLdouble y);
//void RasterPos2dv(const GLdouble *v);
//void RasterPos2f(GLfloat x, GLfloat y);
//void RasterPos2fv(const GLfloat *v);
//void RasterPos2i(GLint x, GLint y);
//void RasterPos2iv(const GLint *v);
//void RasterPos2s(GLshort x, GLshort y);
//void RasterPos2sv(const GLshort *v);
//void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
//void RasterPos3dv(const GLdouble *v);
//void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
//void RasterPos3fv(const GLfloat *v);
//void RasterPos3i(GLint x, GLint y, GLint z);
//void RasterPos3iv(const GLint *v);
//void RasterPos3s(GLshort x, GLshort y, GLshort z);
//void RasterPos3sv(const GLshort *v);
//void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
//void RasterPos4dv(const GLdouble *v);
//void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
//void RasterPos4fv(const GLfloat *v);
//void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
//void RasterPos4iv(const GLint *v);
//void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
//void RasterPos4sv(const GLshort *v);
//void ReadBuffer(GLenum mode);
void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) ARGS
//void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
//void Rectdv(const GLdouble *v1, const GLdouble *v2);
//void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
//void Rectfv(const GLfloat *v1, const GLfloat *v2);
//void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
//void Rectiv(const GLint *v1, const GLint *v2);
//void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
//void Rectsv(const GLshort *v1, const GLshort *v2);
//GLint RenderMode(GLenum mode);
//void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) ARGS
void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) ARGS
//void Scaled(GLdouble x, GLdouble y, GLdouble z) ARGS
//void Scalef(GLfloat x, GLfloat y, GLfloat z) ARGS
void Scissor(GLint x, GLint y, GLsizei width, GLsizei height) ARGS
//void SelectBuffer(GLsizei size, GLuint *buffer);
void ShadeModel(GLenum mode) ARGS
//void StencilFunc(GLenum func, GLint ref, GLuint mask);
//void StencilMask(GLuint mask);
//void StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
//void TexCoord1d(GLdouble s);
//void TexCoord1dv(const GLdouble *v);
//void TexCoord1f(GLfloat s);
//void TexCoord1fv(const GLfloat *v);
//void TexCoord1i(GLint s);
//void TexCoord1iv(const GLint *v);
//void TexCoord1s(GLshort s);
//void TexCoord1sv(const GLshort *v);
//void TexCoord2d(GLdouble s, GLdouble t);
//void TexCoord2dv(const GLdouble *v);
void TexCoord2f(GLfloat s, GLfloat t) ARGS
//void TexCoord2fv(const GLfloat *v);
//void TexCoord2i(GLint s, GLint t);
//void TexCoord2iv(const GLint *v);
//void TexCoord2s(GLshort s, GLshort t);
//void TexCoord2sv(const GLshort *v);
//void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
//void TexCoord3dv(const GLdouble *v);
//void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
//void TexCoord3fv(const GLfloat *v);
//void TexCoord3i(GLint s, GLint t, GLint r);
//void TexCoord3iv(const GLint *v);
//void TexCoord3s(GLshort s, GLshort t, GLshort r);
//void TexCoord3sv(const GLshort *v);
//void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
//void TexCoord4dv(const GLdouble *v);
//void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
//void TexCoord4fv(const GLfloat *v);
//void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
//void TexCoord4iv(const GLint *v);
//void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
//void TexCoord4sv(const GLshort *v);
void TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) ARGS
//void TexEnvf(GLenum target, GLenum pname, GLfloat param) ARGS
//void TexEnvfv(GLenum target, GLenum pname, const GLfloat *params) ARGS
//void TexEnvi(GLenum target, GLenum pname, GLenum param) ARGS	// really, param is GLint, but ...
//void TexEnviv(GLenum target, GLenum pname, const GLint *params);
//void TexGend(GLenum coord, GLenum pname, GLdouble param);
//void TexGendv(GLenum coord, GLenum pname, const GLdouble *params);
//void TexGenf(GLenum coord, GLenum pname, GLfloat param);
//void TexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
//void TexGeni(GLenum coord, GLenum pname, GLint param);
//void TexGeniv(GLenum coord, GLenum pname, const GLint *params);
//void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void TexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) ARGS
//void TexParameterf(GLenum target, GLenum pname, GLfloat param) ARGS
//void TexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void TexParameteri(GLenum target, GLenum pname, GLint param) ARGS
//void TexParameteriv(GLenum target, GLenum pname, const GLint *params);
//void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
//void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) ARGS
//void Translated(GLdouble x, GLdouble y, GLdouble z) ARGS
//void Translatef(GLfloat x, GLfloat y, GLfloat z) ARGS
//void Vertex2d(GLdouble x, GLdouble y);
//void Vertex2dv(const GLdouble *v);
void Vertex2f(GLfloat x, GLfloat y) ARGS
//void Vertex2fv(const GLfloat *v);
//void Vertex2i(GLint x, GLint y);
//void Vertex2iv(const GLint *v);
//void Vertex2s(GLshort x, GLshort y);
//void Vertex2sv(const GLshort *v);
//void Vertex3d(GLdouble x, GLdouble y, GLdouble z) ARGS
//void Vertex3dv(const GLdouble *v);
void Vertex3f(GLfloat x, GLfloat y, GLfloat z) ARGS
void Vertex3fv(const GLfloat *v);
//void Vertex3i(GLint x, GLint y, GLint z);
//void Vertex3iv(const GLint *v);
//void Vertex3s(GLshort x, GLshort y, GLshort z);
//void Vertex3sv(const GLshort *v);
//void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
//void Vertex4dv(const GLdouble *v);
//void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
//void Vertex4fv(const GLfloat *v);
//void Vertex4i(GLint x, GLint y, GLint z, GLint w);
//void Vertex4iv(const GLint *v);
//void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
//void Vertex4sv(const GLshort *v);
void VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) ARGS
void Viewport(GLint x, GLint y, GLsizei width, GLsizei height) ARGS


#platform win32

// miniGL(Voodoo GDI replacement):
//int wglChoosePixelFormat(HDC hdc, CONST PIXELFORMATDESCRIPTOR *ppfd);
//int wglDescribePixelFormat(HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
//int wglGetPixelFormat(HDC hdc);
//BOOL wglSetPixelFormat(HDC hdc, int iPixelFormat, CONST PIXELFORMATDESCRIPTOR *ppfd);
//BOOL wglSwapBuffers(HDC hdc);

//BOOL wglCopyContext(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask);
//HGLRC wglCreateContext(HDC hdc);
//HGLRC wglCreateLayerContext(HDC hdc, int iLayerPlane);
//BOOL wglDeleteContext(HGLRC hglrc);
//HGLRC wglGetCurrentContext();
//HDC wglGetCurrentDC();
//PROC wglGetProcAddress(LPCSTR lpszProc);
//BOOL wglMakeCurrent(HDC hdc, HGLRC hglrc);
//BOOL wglShareLists(HGLRC hglrc1, HGLRC hglrc2);
//BOOL wglUseFontBitmaps(HDC hdc, DWORD first, DWORD count, DWORD listBase) NAME wglUseFontBitmapsA;
//BOOL wglUseFontOutlines(HDC hdc, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf) NAME wglUseFontOutlinesA;
//BOOL wglDescribeLayerPlane(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd);
//int wglSetLayerPaletteEntries(HDC hdc, int iLayerPlane, int iStart, int cEntities, CONST COLORREF *pcr);
//int wglGetLayerPaletteEntries(HDC hdc, int iLayerPlane, int iStart, int cEntities, COLORREF *pcr);
//BOOL wglRealizeLayerPalette(HDC hdc, int iLayerPlane, BOOL bRealize);
//BOOL wglSwapLayerBuffers(HDC hdc, UINT fuPlanes);

#extensions

//-----------------------------------------------------------------------------
//  OpenGL 1.2
//-----------------------------------------------------------------------------

#name 1.2

//-----------------------------------------------------------------------------
//  OpenGL 1.3
//-----------------------------------------------------------------------------

#name 1.3

void ActiveTexture(GLenum unit) ARGS
//void ClientActiveTexture(GLenum unit) ARGS
void CompressedTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) ARGS

//-----------------------------------------------------------------------------
//  OpenGL 1.4
//-----------------------------------------------------------------------------

#name 1.4
// used GL_GENERATE_MIPMAP


//-----------------------------------------------------------------------------
//  OpenGL 2.0
//-----------------------------------------------------------------------------

#name 2.0

//void BlendEquationSeparate(GLenum, GLenum);
//void DrawBuffers(GLsizei, const GLenum *);
//void StencilOpSeparate(GLenum, GLenum, GLenum, GLenum);
//void StencilFuncSeparate(GLenum, GLenum, GLint, GLuint);
//void StencilMaskSeparate(GLenum, GLuint);
void AttachShader(GLuint program, GLuint shader) ARGS
//void BindAttribLocation(GLuint, GLuint, const GLchar *);
void CompileShader(GLuint obj) ARGS
GLuint CreateProgram() ARGS
GLuint CreateShader(GLenum shaderType) ARGS
void DeleteProgram(GLuint obj) ARGS
void DeleteShader(GLuint obj) ARGS
void DetachShader(GLuint program, GLuint shader) ARGS
void DisableVertexAttribArray(GLuint index) ARGS
void EnableVertexAttribArray(GLuint index) ARGS
//void GetActiveAttrib(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
//void GetActiveUniform(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
//void GetAttachedShaders(GLuint, GLsizei, GLsizei *, GLuint *);
GLint GetAttribLocation(GLuint obj, const GLchar *name) ARGS
void GetProgramiv(GLuint obj, GLenum pname, GLint *v) ARGS
void GetProgramInfoLog(GLuint obj, GLsizei maxLength, GLsizei *size, GLchar *infoLog);
void GetShaderiv(GLuint obj, GLenum pname, GLint *v) ARGS
void GetShaderInfoLog(GLuint obj, GLsizei maxLength, GLsizei *size, GLchar *infoLog);
//void GetShaderSource(GLuint, GLsizei, GLsizei *, GLchar *);
GLint GetUniformLocation(GLuint obj, const GLchar *name) ARGS
//void GetUniformfv(GLuint, GLint, GLfloat *);
//void GetUniformiv(GLuint, GLint, GLint *);
//void GetVertexAttribdv(GLuint, GLenum, GLdouble *);
//void GetVertexAttribfv(GLuint, GLenum, GLfloat *);
//void GetVertexAttribiv(GLuint, GLenum, GLint *);
//void GetVertexAttribPointerv(GLuint, GLenum, GLvoid* *);
//GLboolean IsProgram(GLuint);
//GLboolean IsShader(GLuint);
void LinkProgram(GLuint obj) ARGS
void ShaderSource(GLuint obj, GLsizei size, const GLchar** src, const GLint *length) ARGS
void UseProgram(GLuint obj) ARGS
void Uniform1f(GLint, GLfloat);
void Uniform2f(GLint, GLfloat, GLfloat);
//void Uniform3f(GLint, GLfloat, GLfloat, GLfloat);
//void Uniform4f(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
void Uniform1i(GLint, GLint) ARGS
//void Uniform2i(GLint, GLint, GLint);
//void Uniform3i(GLint, GLint, GLint, GLint);
//void Uniform4i(GLint, GLint, GLint, GLint, GLint);
//void Uniform1fv(GLint, GLsizei, const GLfloat *);
//void Uniform2fv(GLint, GLsizei, const GLfloat *);
void Uniform3fv(GLint, GLsizei, const GLfloat *v);
void Uniform4fv(GLint, GLsizei, const GLfloat *);
//void Uniform1iv(GLint, GLsizei, const GLint *);
//void Uniform2iv(GLint, GLsizei, const GLint *);
//void Uniform3iv(GLint, GLsizei, const GLint *);
//void Uniform4iv(GLint, GLsizei, const GLint *);
//void UniformMatrix2fv(GLint, GLsizei, GLboolean, const GLfloat *);
//void UniformMatrix3fv(GLint, GLsizei, GLboolean, const GLfloat *);
//void UniformMatrix4fv(GLint, GLsizei, GLboolean, const GLfloat *);
//void ValidateProgram(GLuint);
//void VertexAttrib1d(GLuint, GLdouble);
//void VertexAttrib1dv(GLuint, const GLdouble *);
//void VertexAttrib1f(GLuint, GLfloat);
//void VertexAttrib1fv(GLuint, const GLfloat *);
//void VertexAttrib1s(GLuint, GLshort);
//void VertexAttrib1sv(GLuint, const GLshort *);
//void VertexAttrib2d(GLuint, GLdouble, GLdouble);
//void VertexAttrib2dv(GLuint, const GLdouble *);
//void VertexAttrib2f(GLuint, GLfloat, GLfloat);
//void VertexAttrib2fv(GLuint, const GLfloat *);
//void VertexAttrib2s(GLuint, GLshort, GLshort);
//void VertexAttrib2sv(GLuint, const GLshort *);
//void VertexAttrib3d(GLuint, GLdouble, GLdouble, GLdouble);
//void VertexAttrib3dv(GLuint, const GLdouble *);
//void VertexAttrib3f(GLuint, GLfloat, GLfloat, GLfloat);
void VertexAttrib3fv(GLuint index, const GLfloat *v);
//void VertexAttrib3s(GLuint, GLshort, GLshort, GLshort);
//void VertexAttrib3sv(GLuint, const GLshort *);
//void VertexAttrib4Nbv(GLuint, const GLbyte *);
//void VertexAttrib4Niv(GLuint, const GLint *);
//void VertexAttrib4Nsv(GLuint, const GLshort *);
//void VertexAttrib4Nub(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
//void VertexAttrib4Nubv(GLuint, const GLubyte *);
//void VertexAttrib4Nuiv(GLuint, const GLuint *);
//void VertexAttrib4Nusv(GLuint, const GLushort *);
//void VertexAttrib4bv(GLuint, const GLbyte *);
//void VertexAttrib4d(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
//void VertexAttrib4dv(GLuint, const GLdouble *);
//void VertexAttrib4f(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
//void VertexAttrib4fv(GLuint, const GLfloat *);
//void VertexAttrib4iv(GLuint, const GLint *);
//void VertexAttrib4s(GLuint, GLshort, GLshort, GLshort, GLshort);
//void VertexAttrib4sv(GLuint, const GLshort *);
//void VertexAttrib4ubv(GLuint, const GLubyte *);
//void VertexAttrib4uiv(GLuint, const GLuint *);
//void VertexAttrib4usv(GLuint, const GLushort *);
void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) ARGS

#name 3.1

//-----------------------------------------------------------------------------
//  Extensions
//-----------------------------------------------------------------------------

#name GL_EXT_texture_compression_s3tc

#name GL_EXT_framebuffer_object
//GLboolean IsRenderbufferEXT(GLuint renderbuffer) ARGS
void BindRenderbufferEXT(GLenum target, GLuint renderbuffer) ARGS
void DeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers) ARGS
void GenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers) ARGS
void RenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) ARGS
//void GetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params) ARGS
//GLboolean IsFramebufferEXT(GLuint framebuffer) ARGS
void BindFramebufferEXT(GLenum target, GLuint framebuffer) ARGS
void DeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers) ARGS
void GenFramebuffersEXT(GLsizei n, GLuint *framebuffers) ARGS
GLenum CheckFramebufferStatusEXT(GLenum target) ARGS
//void FramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) ARGS
void FramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) ARGS
//void FramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) ARGS
void FramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) ARGS
//void GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params) ARGS
void GenerateMipmapEXT(GLenum target) ARGS

#name GL_ARB_half_float_pixel

#name GL_ARB_texture_float

#name GL_ARB_texture_compression_rgtc
#alias GL_EXT_texture_compression_rgtc

#name GL_ARB_texture_compression_bptc

#platform win32
#platform linux
